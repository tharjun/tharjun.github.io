<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-01-05T18:13:24+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">KDE Connect</title><subtitle>KDE Connect: A project that enables all your devices to communicate with each other.
</subtitle><entry><title type="html">KDE Connect Website- Taking it Further</title><link href="http://localhost:4000/2020/01/04/0081.html" rel="alternate" type="text/html" title="KDE Connect Website- Taking it Further" /><published>2020-01-04T21:32:00+05:30</published><updated>2020-01-04T21:32:00+05:30</updated><id>http://localhost:4000/2020/01/04/0081</id><content type="html" xml:base="http://localhost:4000/2020/01/04/0081.html">&lt;p&gt;Happy to announce that the Connect Website is almost over.&lt;/p&gt;

&lt;p&gt;Many of the suggestions and feedbacks were taken into consideration and implemented. Webp support is also added for images for faster load times. The homepage has a new Video showing of the features which I am planning to make a bit more better. Will update on that soon. The video is currently on my Youtube Channel which can be moved to some other location once the development of the website is complete. &lt;/p&gt;

&lt;p&gt;Hope to get more feedback on what else to change.&lt;/p&gt;

&lt;p class=&quot;author&quot;&gt;— T.H.Arjun&lt;/p&gt;</content><author><name></name></author><summary type="html">Happy to announce that the Connect Website is almost over.</summary></entry><entry><title type="html">KDE Frameworks 6 sprint</title><link href="http://localhost:4000/2019/11/29/kde_frameworks_6_sprint.html" rel="alternate" type="text/html" title="KDE Frameworks 6 sprint" /><published>2019-11-29T00:00:00+05:30</published><updated>2019-11-29T00:00:00+05:30</updated><id>http://localhost:4000/2019/11/29/kde_frameworks_6_sprint</id><content type="html" xml:base="http://localhost:4000/2019/11/29/kde_frameworks_6_sprint.html">&lt;p&gt;Last week I took a train to Berlin for the KDE Frameworks 6 kickoff sprint. A lot has been said about it by my fellow attendees already, so I won&amp;#8217;t go into detail much. &lt;/p&gt;



&lt;p&gt;Work on Qt 6 has begun and with Qt 6 a version 6 of the KDE Frameworks is due. This will gives us the opportunity to clean up and redesign some of our API.&lt;/p&gt;



&lt;p&gt;Main goal for the sprint was to discuss the major design principles for KF6. I personally focussed on two aspects. First, we want to better separate logic from the user interface to allow different UI implementations for desktop and mobile uses. Futhermore, we want to reduce the amount of dependencies our libraries have. While we are doing fine for a lot of frameworks some have very ugly dependency structures. Probably our worst offender here is KIO, the framework that powers Dolphin and many more KDE applications.&lt;/p&gt;



&lt;p&gt;This is the current dependency tree of KIO:&lt;/p&gt;



&lt;figure class=&quot;wp-block-image alignfull size-full&quot;&gt;&lt;img data-attachment-id=&quot;264&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/kio4-2/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/11/kio4-2.png&quot; data-orig-size=&quot;20085,4006&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;kio4-2&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/11/kio4-2.png?w=300&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/11/kio4-2.png?w=1024&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/11/kio4-2.png&quot; alt=&quot;&quot; class=&quot;wp-image-264&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;With some changes we discussed applied it could look like this:&lt;/p&gt;



&lt;figure class=&quot;wp-block-image alignwide size-full&quot;&gt;&lt;img data-attachment-id=&quot;266&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/kio3/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/11/kio3.png&quot; data-orig-size=&quot;13500,1582&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;kio3&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/11/kio3.png?w=300&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/11/kio3.png?w=1024&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/11/kio3.png&quot; alt=&quot;&quot; class=&quot;wp-image-266&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;Please note that all of this is highly tentative and might not always work out the way we imagine. While we can do some of these changes in the Frameworks 5 lifetime already most of it needs breaking API, so it will only be available in KF6.&lt;/p&gt;



&lt;p&gt;This work will hopefully make KDE Frameworks more appealing for users outside of KDE. If you are developing Qt-based software and would like to know more about how KDE Frameworks can help you please contact us at #kde-devel on freenode or kde-frameworks-devel@kde.org&lt;/p&gt;</content><author><name>Nicolas Fella</name></author><summary type="html">Last week I took a train to Berlin for the KDE Frameworks 6 kickoff sprint. A lot has been said about it by my fellow attendees already, so I won&amp;#8217;t go into detail much.</summary></entry><entry><title type="html">KDE Connect Sprint 2019 in Nuremberg</title><link href="http://localhost:4000/2019/09/29/kde_connect_sprint_2019_in_nuremberg.html" rel="alternate" type="text/html" title="KDE Connect Sprint 2019 in Nuremberg" /><published>2019-09-29T00:00:00+05:30</published><updated>2019-09-29T00:00:00+05:30</updated><id>http://localhost:4000/2019/09/29/kde_connect_sprint_2019_in_nuremberg</id><content type="html" xml:base="http://localhost:4000/2019/09/29/kde_connect_sprint_2019_in_nuremberg.html">&lt;p&gt;In case you don&amp;#8217;t know yet, KDE sponsors developer gatherings around the world, &amp;#8220;sprints&amp;#8221;, to hack for a few days on a specific topic. This summer, for the second time ever, we organized one for KDE Connect!&lt;/p&gt;
&lt;figure data-shortcode=&quot;caption&quot; id=&quot;attachment_232&quot; aria-describedby=&quot;caption-attachment-232&quot; style=&quot;width: 4608px&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img data-attachment-id=&quot;232&quot; data-permalink=&quot;https://albertvaka.wordpress.com/2019/09/29/kde-connect-sprint-2019/img_20190720_130320/&quot; data-orig-file=&quot;https://albertvaka.files.wordpress.com/2019/09/img_20190720_130320.jpg&quot; data-orig-size=&quot;4608,3456&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;1.7&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;ONEPLUS A6003&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;1563627801&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;4.25&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;400&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0.04&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;1&amp;quot;}&quot; data-image-title=&quot;IMG_20190720_130320&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://albertvaka.files.wordpress.com/2019/09/img_20190720_130320.jpg?w=300&quot; data-large-file=&quot;https://albertvaka.files.wordpress.com/2019/09/img_20190720_130320.jpg?w=604&quot; class=&quot;alignnone size-full wp-image-232&quot; src=&quot;https://albertvaka.files.wordpress.com/2019/09/img_20190720_130320.jpg?w=604&quot; alt=&quot;IMG_20190720_130320&quot; srcset=&quot;https://albertvaka.files.wordpress.com/2019/09/img_20190720_130320.jpg?w=604 604w, https://albertvaka.files.wordpress.com/2019/09/img_20190720_130320.jpg?w=1208 1208w, https://albertvaka.files.wordpress.com/2019/09/img_20190720_130320.jpg?w=150 150w, https://albertvaka.files.wordpress.com/2019/09/img_20190720_130320.jpg?w=300 300w, https://albertvaka.files.wordpress.com/2019/09/img_20190720_130320.jpg?w=768 768w, https://albertvaka.files.wordpress.com/2019/09/img_20190720_130320.jpg?w=1024 1024w&quot; sizes=&quot;(max-width: 604px) 100vw, 604px&quot;   /&gt;&lt;figcaption id=&quot;caption-attachment-232&quot; class=&quot;wp-caption-text&quot;&gt;The hack room&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;This time, the people from SUSE hosted us at their offices in the beautiful city of Nuremberg, Germany, together with two other KDE sprints that all happened at the same time! We called it ~The Nuremberg Megasprint~.&lt;/p&gt;
&lt;figure data-shortcode=&quot;caption&quot; id=&quot;attachment_233&quot; aria-describedby=&quot;caption-attachment-233&quot; style=&quot;width: 4608px&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img data-attachment-id=&quot;233&quot; data-permalink=&quot;https://albertvaka.wordpress.com/2019/09/29/kde-connect-sprint-2019/img_20190720_155826/&quot; data-orig-file=&quot;https://albertvaka.files.wordpress.com/2019/09/img_20190720_155826.jpg&quot; data-orig-size=&quot;4608,3456&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;1.7&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;ONEPLUS A6003&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;1563638307&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;4.25&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;640&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0.05&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;1&amp;quot;}&quot; data-image-title=&quot;IMG_20190720_155826&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://albertvaka.files.wordpress.com/2019/09/img_20190720_155826.jpg?w=300&quot; data-large-file=&quot;https://albertvaka.files.wordpress.com/2019/09/img_20190720_155826.jpg?w=604&quot; class=&quot;alignnone size-full wp-image-233&quot; src=&quot;https://albertvaka.files.wordpress.com/2019/09/img_20190720_155826.jpg?w=604&quot; alt=&quot;IMG_20190720_155826&quot; srcset=&quot;https://albertvaka.files.wordpress.com/2019/09/img_20190720_155826.jpg?w=604 604w, https://albertvaka.files.wordpress.com/2019/09/img_20190720_155826.jpg?w=1208 1208w, https://albertvaka.files.wordpress.com/2019/09/img_20190720_155826.jpg?w=150 150w, https://albertvaka.files.wordpress.com/2019/09/img_20190720_155826.jpg?w=300 300w, https://albertvaka.files.wordpress.com/2019/09/img_20190720_155826.jpg?w=768 768w, https://albertvaka.files.wordpress.com/2019/09/img_20190720_155826.jpg?w=1024 1024w&quot; sizes=&quot;(max-width: 604px) 100vw, 604px&quot;   /&gt;&lt;figcaption id=&quot;caption-attachment-233&quot; class=&quot;wp-caption-text&quot;&gt;SUSE&amp;#8217;s cool museum room&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;There we discussed and hacked on many things, and probably Simon&amp;#8217;s &lt;a href=&quot;https://simonredman.wordpress.com/2019/07/25/welcome-to-kde-nuremberg-megaspring-part-1/&quot;&gt;series&lt;/a&gt; &lt;a href=&quot;https://simonredman.wordpress.com/2019/07/27/kde-connect-mdns-nuremberg-megaspring-part-2/&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;https://simonredman.wordpress.com/2019/08/01/kde-connect-sms-nuremberg-megasprint-part-3/&quot;&gt;blogposts&lt;/a&gt; cover that better than I could do. However, if I can pick a single thing to highlight from the sprint, it is that I had the chance to meet in person with my Google Summer of Code mentee, &lt;a href=&quot;https://kde.inoki.cc/&quot;&gt;Inoki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;KDE Connect itself began as a GSoC project the year 2013, and since then it accumulates the work of 5 different GSoC students, among many other developers, translators, designers&amp;#8230; However, this was the first time I met a student I was mentoring in person! &lt;img src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/2764.png&quot; alt=&quot;❤&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I want to thank KDE for sponsoring the sprint, and every person who has made a donation to KDE for making it possible. Thank you!&lt;/p&gt;</content><author><name>Albert Vaca</name></author><summary type="html">In case you don&amp;#8217;t know yet, KDE sponsors developer gatherings around the world, &amp;#8220;sprints&amp;#8221;, to hack for a few days on a specific topic. This summer, for the second time ever, we organized one for KDE Connect! The hack room This time, the people from SUSE hosted us at their offices in the beautiful city of Nuremberg, Germany, together with two other KDE sprints that all happened at the same time! We called it ~The Nuremberg Megasprint~. SUSE&amp;#8217;s cool museum room There we discussed and hacked on many things, and probably Simon&amp;#8217;s series of blogposts cover that better than I could do. However, if I can pick a single thing to highlight from the sprint, it is that I had the chance to meet in person with my Google Summer of Code mentee, Inoki. KDE Connect itself began as a GSoC project the year 2013, and since then it accumulates the work of 5 different GSoC students, among many other developers, translators, designers&amp;#8230; However, this was the first time I met a student I was mentoring in person!  I want to thank KDE for sponsoring the sprint, and every person who has made a donation to KDE for making it possible. Thank you!</summary></entry><entry><title type="html">KDE Connect SMS: Nuremberg Megasprint Part 3</title><link href="http://localhost:4000/2019/08/01/kde_connect_sms_nuremberg_megasprint_part_3.html" rel="alternate" type="text/html" title="KDE Connect SMS: Nuremberg Megasprint Part 3" /><published>2019-08-01T00:00:00+05:30</published><updated>2019-08-01T00:00:00+05:30</updated><id>http://localhost:4000/2019/08/01/kde_connect_sms_nuremberg_megasprint_part_3</id><content type="html" xml:base="http://localhost:4000/2019/08/01/kde_connect_sms_nuremberg_megasprint_part_3.html">&lt;p&gt;When interacting with other users of KDE Connect, I often notice something funny. People will often talk about how nice it is that they can control their computer from their phone (using the media controls, the mousepad plugin, or several of the others). For me, this has always been a secondary benefit. I use KDE Connect&amp;#8217;s presentation plugin for all of my presentations but my primary goal has always been to be able to control my phone from my computer. I hate the phone keyboard, I hate the tiny screen, and I hate having to pull the thing out of my pocket.&lt;/p&gt;
&lt;p&gt;On a daily basis, the number 1 thing I need to do with my phone is send or read SMS. In the United States, SMS is the de facto default communication system. In Europe, I basically assume that anyone I want to communicate with uses WhatsApp. In the US, with one friend I use WhatsApp, with another one friend I use Telegram, and with my family and other friends I use SMS. (Many people use Facebook Messenger but that is still not as widespread).&lt;/p&gt;
&lt;p&gt;Those who have been very carefully following the KDE Connect channels might already know that we have been working on a desktop application which uses KDE Connect to load SMS conversation history and send SMS using the phone. (I have been keeping this under wraps because I know it is our #1 requested feature and I don&amp;#8217;t want to tease anyone with a stream of &amp;#8220;Oh yes, it&amp;#8217;s almost there&amp;#8221; half-promises)&lt;/p&gt;
&lt;p&gt;The SMS app started March 2018 at the previous KDE Connect sprint. I arrived in Barcelona with a half-written contacts synchronization plugin and the goal to never touch my phone again. In only a few days, we had the contacts plugin in its current form and the skeleton of an SMS app (based on &lt;a href=&quot;https://doc.qt.io/qt-5/qtquickcontrols-chattutorial-example.html&quot;&gt;Qt&amp;#8217;s QML chat app tutorial&lt;/a&gt;). It could read the display names and avatars from the synchronized contacts and you could use the compose message box to send SMS. There was no message history yet, just some statically-created items in the QML, but everything starts somewhere!&lt;/p&gt;
&lt;figure data-shortcode=&quot;caption&quot; id=&quot;attachment_63&quot; aria-describedby=&quot;caption-attachment-63&quot; style=&quot;width: 806px&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img data-attachment-id=&quot;63&quot; data-permalink=&quot;https://simonredman.wordpress.com/2019/08/01/kde-connect-sms-nuremberg-megasprint-part-3/2018-03-26-kde-connect-v0-0/&quot; data-orig-file=&quot;https://simonredman.files.wordpress.com/2019/07/2018-03-26-kde-connect-v0-0.jpg&quot; data-orig-size=&quot;806,716&quot; data-comments-opened=&quot;0&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;2018-03-26 KDE Connect v0-0&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://simonredman.files.wordpress.com/2019/07/2018-03-26-kde-connect-v0-0.jpg?w=300&quot; data-large-file=&quot;https://simonredman.files.wordpress.com/2019/07/2018-03-26-kde-connect-v0-0.jpg?w=700&quot; class=&quot;alignnone size-full wp-image-63&quot; src=&quot;https://simonredman.files.wordpress.com/2019/07/2018-03-26-kde-connect-v0-0.jpg?w=700&quot; alt=&quot;2018-03-26 KDE Connect v0-0.jpg&quot; srcset=&quot;https://simonredman.files.wordpress.com/2019/07/2018-03-26-kde-connect-v0-0.jpg?w=700 700w, https://simonredman.files.wordpress.com/2019/07/2018-03-26-kde-connect-v0-0.jpg?w=150 150w, https://simonredman.files.wordpress.com/2019/07/2018-03-26-kde-connect-v0-0.jpg?w=300 300w, https://simonredman.files.wordpress.com/2019/07/2018-03-26-kde-connect-v0-0.jpg?w=768 768w, https://simonredman.files.wordpress.com/2019/07/2018-03-26-kde-connect-v0-0.jpg 806w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;   /&gt;&lt;figcaption id=&quot;caption-attachment-63&quot; class=&quot;wp-caption-text&quot;&gt;KDE Connect SMS v0.0&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Around May, Aleix Pol and I were talking about what the interface should look like. We agreed that it should be very &amp;#8220;normal&amp;#8221;, like every other chat app, so I came up with this fabulous drawing.&lt;/p&gt;
&lt;figure data-shortcode=&quot;caption&quot; id=&quot;attachment_57&quot; aria-describedby=&quot;caption-attachment-57&quot; style=&quot;width: 2066px&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-57&quot; src=&quot;https://simonredman.files.wordpress.com/2019/07/1564053347781.jpg?w=700&quot; alt=&quot;1564053347781.jpg&quot;   /&gt;&lt;figcaption id=&quot;caption-attachment-57&quot; class=&quot;wp-caption-text&quot;&gt;Special thanks to PhotoScan for only being able to export photos with a watermark&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The history of the SMS app has more details than we need for this post. Along the way, the KDE Connect Android app was updated with many content resolvers (and many StackOverflow references) to handle getting the SMS (and MMS) history. Several GUI elements have been &amp;#8220;borrowed&amp;#8221; from &lt;a href=&quot;https://invent.kde.org/kde/kaidan&quot;&gt;Kaidan&lt;/a&gt;. High on my soon-to-do list is move the Kaidan GUI elements which could be used by any other project looking to make a chat interface.&lt;/p&gt;
&lt;p&gt;I am very happy with the current version of the app. I use it regularly and I find it very useful. Though it only has a few features, I have focused on fewer, more-stable features for the initial release. It can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Show a list of conversation currently existing on the phone&lt;/li&gt;
&lt;li&gt;Show conversation history&lt;/li&gt;
&lt;li&gt;Send and display SMS&lt;/li&gt;
&lt;li&gt;Display (not send) plain-text MMS including group messages&lt;/li&gt;
&lt;li&gt;Understand non-text MMS&lt;/li&gt;
&lt;li&gt;Update in real-time as more messages are received&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have left several thing for future releases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start a new conversation
&lt;ul&gt;
&lt;li&gt;I consider this a less-common usecase than replying to an existing conversation, so I focused on other things&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Show MMS attachments
&lt;ul&gt;
&lt;li&gt;This requires upgrading the Android interface to read arbritrary attachments and upgrading the GUI to do something with those (like display pictures and offer downloads for everything else)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Send MMS
&lt;ul&gt;
&lt;li&gt;The current SMS-sending interface is very basic, so it will probably be significantly modified or even replaced.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the current version of the SMS app:&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;60&quot; data-permalink=&quot;https://simonredman.wordpress.com/2019/08/01/kde-connect-sms-nuremberg-megasprint-part-3/2019-07-25-kde-connect-sms-v1-0/&quot; data-orig-file=&quot;https://simonredman.files.wordpress.com/2019/07/2019-07-25-kde-connect-sms-v1.0.png&quot; data-orig-size=&quot;806,475&quot; data-comments-opened=&quot;0&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;2019-07-25 KDE Connect SMS v1.0&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://simonredman.files.wordpress.com/2019/07/2019-07-25-kde-connect-sms-v1.0.png?w=300&quot; data-large-file=&quot;https://simonredman.files.wordpress.com/2019/07/2019-07-25-kde-connect-sms-v1.0.png?w=700&quot; class=&quot;alignnone size-full wp-image-60&quot; src=&quot;https://simonredman.files.wordpress.com/2019/07/2019-07-25-kde-connect-sms-v1.0.png?w=700&quot; alt=&quot;2019-07-25 KDE Connect SMS v1.0&quot; srcset=&quot;https://simonredman.files.wordpress.com/2019/07/2019-07-25-kde-connect-sms-v1.0.png?w=700 700w, https://simonredman.files.wordpress.com/2019/07/2019-07-25-kde-connect-sms-v1.0.png?w=150 150w, https://simonredman.files.wordpress.com/2019/07/2019-07-25-kde-connect-sms-v1.0.png?w=300 300w, https://simonredman.files.wordpress.com/2019/07/2019-07-25-kde-connect-sms-v1.0.png?w=768 768w, https://simonredman.files.wordpress.com/2019/07/2019-07-25-kde-connect-sms-v1.0.png 806w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;   /&gt;&lt;/p&gt;
&lt;p&gt;And the corresponding conversation on the phone:&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;61&quot; data-permalink=&quot;https://simonredman.wordpress.com/2019/08/01/kde-connect-sms-nuremberg-megasprint-part-3/screenshot_20190725-135536/&quot; data-orig-file=&quot;https://simonredman.files.wordpress.com/2019/07/screenshot_20190725-135536-1.jpg&quot; data-orig-size=&quot;1080,1880&quot; data-comments-opened=&quot;0&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screenshot_20190725-135536&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://simonredman.files.wordpress.com/2019/07/screenshot_20190725-135536-1.jpg?w=172&quot; data-large-file=&quot;https://simonredman.files.wordpress.com/2019/07/screenshot_20190725-135536-1.jpg?w=588&quot; class=&quot;alignnone size-full wp-image-61&quot; src=&quot;https://simonredman.files.wordpress.com/2019/07/screenshot_20190725-135536-1.jpg?w=700&quot; alt=&quot;Screenshot_20190725-135536&quot; srcset=&quot;https://simonredman.files.wordpress.com/2019/07/screenshot_20190725-135536-1.jpg?w=700 700w, https://simonredman.files.wordpress.com/2019/07/screenshot_20190725-135536-1.jpg?w=86 86w, https://simonredman.files.wordpress.com/2019/07/screenshot_20190725-135536-1.jpg?w=172 172w, https://simonredman.files.wordpress.com/2019/07/screenshot_20190725-135536-1.jpg?w=768 768w, https://simonredman.files.wordpress.com/2019/07/screenshot_20190725-135536-1.jpg?w=588 588w, https://simonredman.files.wordpress.com/2019/07/screenshot_20190725-135536-1.jpg 1080w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;   /&gt;&lt;/p&gt;
&lt;p&gt;The SMS app now builds by default when you build KDE Connect so it will be officially released with the next release of KDE Connect. Hopefully I have time to iron out one or two more bugs before then!&lt;/p&gt;</content><author><name>Simon Redman</name></author><summary type="html">When interacting with other users of KDE Connect, I often notice something funny. People will often talk about how nice it is that they can control their computer from their phone (using the media controls, the mousepad plugin, or several of the others). For me, this has always been a secondary benefit. I use KDE Connect&amp;#8217;s presentation plugin for all of my presentations but my primary goal has always been to be able to control my phone from my computer. I hate the phone keyboard, I hate the tiny screen, and I hate having to pull the thing out of my pocket. On a daily basis, the number 1 thing I need to do with my phone is send or read SMS. In the United States, SMS is the de facto default communication system. In Europe, I basically assume that anyone I want to communicate with uses WhatsApp. In the US, with one friend I use WhatsApp, with another one friend I use Telegram, and with my family and other friends I use SMS. (Many people use Facebook Messenger but that is still not as widespread). Those who have been very carefully following the KDE Connect channels might already know that we have been working on a desktop application which uses KDE Connect to load SMS conversation history and send SMS using the phone. (I have been keeping this under wraps because I know it is our #1 requested feature and I don&amp;#8217;t want to tease anyone with a stream of &amp;#8220;Oh yes, it&amp;#8217;s almost there&amp;#8221; half-promises) The SMS app started March 2018 at the previous KDE Connect sprint. I arrived in Barcelona with a half-written contacts synchronization plugin and the goal to never touch my phone again. In only a few days, we had the contacts plugin in its current form and the skeleton of an SMS app (based on Qt&amp;#8217;s QML chat app tutorial). It could read the display names and avatars from the synchronized contacts and you could use the compose message box to send SMS. There was no message history yet, just some statically-created items in the QML, but everything starts somewhere! KDE Connect SMS v0.0 Around May, Aleix Pol and I were talking about what the interface should look like. We agreed that it should be very &amp;#8220;normal&amp;#8221;, like every other chat app, so I came up with this fabulous drawing. Special thanks to PhotoScan for only being able to export photos with a watermark The history of the SMS app has more details than we need for this post. Along the way, the KDE Connect Android app was updated with many content resolvers (and many StackOverflow references) to handle getting the SMS (and MMS) history. Several GUI elements have been &amp;#8220;borrowed&amp;#8221; from Kaidan. High on my soon-to-do list is move the Kaidan GUI elements which could be used by any other project looking to make a chat interface. I am very happy with the current version of the app. I use it regularly and I find it very useful. Though it only has a few features, I have focused on fewer, more-stable features for the initial release. It can: Show a list of conversation currently existing on the phone Show conversation history Send and display SMS Display (not send) plain-text MMS including group messages Understand non-text MMS Update in real-time as more messages are received I have left several thing for future releases: Start a new conversation I consider this a less-common usecase than replying to an existing conversation, so I focused on other things Show MMS attachments This requires upgrading the Android interface to read arbritrary attachments and upgrading the GUI to do something with those (like display pictures and offer downloads for everything else) Send MMS The current SMS-sending interface is very basic, so it will probably be significantly modified or even replaced. Here is the current version of the SMS app: And the corresponding conversation on the phone: The SMS app now builds by default when you build KDE Connect so it will be officially released with the next release of KDE Connect. Hopefully I have time to iron out one or two more bugs before then!</summary></entry><entry><title type="html">KDE Connect mDNS: Nuremberg Megaspring Part 2</title><link href="http://localhost:4000/2019/07/27/kde_connect_mdns_nuremberg_megaspring_part_2.html" rel="alternate" type="text/html" title="KDE Connect mDNS: Nuremberg Megaspring Part 2" /><published>2019-07-27T00:00:00+05:30</published><updated>2019-07-27T00:00:00+05:30</updated><id>http://localhost:4000/2019/07/27/kde_connect_mdns_nuremberg_megaspring_part_2</id><content type="html" xml:base="http://localhost:4000/2019/07/27/kde_connect_mdns_nuremberg_megaspring_part_2.html">&lt;p&gt;Sprints are a great time to talk in real-time to other project developers. One of the things we talked about at the KDE Connect part of the &amp;#8220;Nuremberg Megasprint&amp;#8221; was the problem that our current discovery protocol often doesn&amp;#8217;t work, since many networks block the UDP broadcast we currently use. Additionally, we often get feature requests for more privacy-conscious modes of KDE Connect operation. Fixing either of these problems would require a new Link Provider (as we call it), and maybe we can fix both at once.&lt;/p&gt;
&lt;h3&gt;A New Backend&lt;/h3&gt;
&lt;p&gt;First, let&amp;#8217;s talk about discovery. The current service discovery mechanism in KDE Connect is we send a multicast UDP packet to the current device&amp;#8217;s /24 subnet. This is not ideal, since some networks are not /24, and since many public networks block packets of this sort. Alternatively, you can manually add an IP address which then establishes a direct connection. Manual connections work on many networks with block UDP, but it is a bit of a hassle. Can we find a better way to auto-discover services?&lt;/p&gt;
&lt;p&gt;A few months ago, a user named rytilahti posted two patches to our Phabricator for KDE Connect service advertisement over mDNS (aka avahi, aka nsd, aka &amp;#8230;). The patches were for advertisement-only (it still doesn&amp;#8217;t establish a connection) but they were a good proof of concept to show that mDNS works on many institutional networks which block UDP multicast since mDNS is frequently used for other things like network printer discovery which are desired by those institutional networks.&lt;/p&gt;
&lt;p&gt;I would post a screenshot here, but I don&amp;#8217;t want to spread details of an internal network too far &lt;img src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;At the sprint, we talked about whether we would like to move forward with these and we decided it was useful, so Albert Vaca and I put together two proof of concept patches to start trying to establish a connection using mDNS advertisements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android: &lt;a href=&quot;https://invent.kde.org/kde/kdeconnect-android/merge_requests/91&quot; rel=&quot;nofollow&quot;&gt;https://invent.kde.org/kde/kdeconnect-android/merge_requests/91&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Qt/C++: &lt;a href=&quot;https://invent.kde.org/kde/kdeconnect-kde/merge_requests/147&quot; rel=&quot;nofollow&quot;&gt;https://invent.kde.org/kde/kdeconnect-kde/merge_requests/147&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The patches are not yet fully working. We can both see each other and attempt to establish a connection but then something goes wrong and one of them crashes. Given that this was less than 8 hours of work, I would call this a success!&lt;/p&gt;
&lt;p&gt;There is still plenty to do, but it was very helpful to be able to sit in-person and talk about what we wanted to accomplish and work out the details of the new protocol.&lt;/p&gt;
&lt;h3&gt;More Privacy&lt;/h3&gt;
&lt;p&gt;Before we talk about privacy, it helps to have a quick view of how KDE Connect currently establishes a connection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As described above, both devices send a multicast UDP packet. This is what we call an &amp;#8220;Identity Packet&amp;#8221;, where each device send its name, capabilities (enabled plugins), and unique ID&lt;/li&gt;
&lt;li&gt;If your device receives an identity packet from a device it recognizes, it establishes a secure TCP connection (if both devices open a connection, the duplicate connection is handled and closed)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As long as we are talking about a new backend, let&amp;#8217;s think about ways to make KDE Connect more privacy-conscious. There are two problems to address:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device names often contain personal information. For instances &amp;#8220;Simon&amp;#8217;s Phone&amp;#8221; tells you that &amp;#8220;Simon&amp;#8221; is around&lt;/li&gt;
&lt;li&gt;Device IDs are unique and unchanging. Even assuming I rename my phone, you can still track a particular device by checking for the same ID to show up again and again&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solving the first problem is easy. We want the user&amp;#8217;s device name so we can display it in the list of available devices to pair with. So, instead of sending that information in the identity all the time, have some &amp;#8220;discovery mode&amp;#8221; switch which otherwise withholds the device name until a connection to an already-trusted device is established.&lt;/p&gt;
&lt;p&gt;This leaves the second problem, which quite a bit more tricky. One answer is to have trusted user-selected trusted wifi networks, so KDE Connect doesn&amp;#8217;t broadcast on a random wifi that the user connects to. But what if I connect to, say, my university network where I want to use KDE Connect but I don&amp;#8217;t want to tell everyone that I&amp;#8217;m here?&lt;/p&gt;
&lt;p&gt;We don&amp;#8217;t have a final answer to this question, but we discussed a few possible solutions. We would like some way of verifying ourselves to the other device which conceals our identity behind some shared secret, so the other device can trust that we are who we say we are, but other devices can&amp;#8217;t fingerprint us. It is a tricky problem but not yet one to solve. Step 1 is to get the new mDNS backend working, step 2 is to add advanced features to it!&lt;/p&gt;</content><author><name>Simon Redman</name></author><summary type="html">Sprints are a great time to talk in real-time to other project developers. One of the things we talked about at the KDE Connect part of the &amp;#8220;Nuremberg Megasprint&amp;#8221; was the problem that our current discovery protocol often doesn&amp;#8217;t work, since many networks block the UDP broadcast we currently use. Additionally, we often get feature requests for more privacy-conscious modes of KDE Connect operation. Fixing either of these problems would require a new Link Provider (as we call it), and maybe we can fix both at once. A New Backend First, let&amp;#8217;s talk about discovery. The current service discovery mechanism in KDE Connect is we send a multicast UDP packet to the current device&amp;#8217;s /24 subnet. This is not ideal, since some networks are not /24, and since many public networks block packets of this sort. Alternatively, you can manually add an IP address which then establishes a direct connection. Manual connections work on many networks with block UDP, but it is a bit of a hassle. Can we find a better way to auto-discover services? A few months ago, a user named rytilahti posted two patches to our Phabricator for KDE Connect service advertisement over mDNS (aka avahi, aka nsd, aka &amp;#8230;). The patches were for advertisement-only (it still doesn&amp;#8217;t establish a connection) but they were a good proof of concept to show that mDNS works on many institutional networks which block UDP multicast since mDNS is frequently used for other things like network printer discovery which are desired by those institutional networks. I would post a screenshot here, but I don&amp;#8217;t want to spread details of an internal network too far At the sprint, we talked about whether we would like to move forward with these and we decided it was useful, so Albert Vaca and I put together two proof of concept patches to start trying to establish a connection using mDNS advertisements: Android: https://invent.kde.org/kde/kdeconnect-android/merge_requests/91 Qt/C++: https://invent.kde.org/kde/kdeconnect-kde/merge_requests/147 The patches are not yet fully working. We can both see each other and attempt to establish a connection but then something goes wrong and one of them crashes. Given that this was less than 8 hours of work, I would call this a success! There is still plenty to do, but it was very helpful to be able to sit in-person and talk about what we wanted to accomplish and work out the details of the new protocol. More Privacy Before we talk about privacy, it helps to have a quick view of how KDE Connect currently establishes a connection: As described above, both devices send a multicast UDP packet. This is what we call an &amp;#8220;Identity Packet&amp;#8221;, where each device send its name, capabilities (enabled plugins), and unique ID If your device receives an identity packet from a device it recognizes, it establishes a secure TCP connection (if both devices open a connection, the duplicate connection is handled and closed) As long as we are talking about a new backend, let&amp;#8217;s think about ways to make KDE Connect more privacy-conscious. There are two problems to address: Device names often contain personal information. For instances &amp;#8220;Simon&amp;#8217;s Phone&amp;#8221; tells you that &amp;#8220;Simon&amp;#8221; is around Device IDs are unique and unchanging. Even assuming I rename my phone, you can still track a particular device by checking for the same ID to show up again and again Solving the first problem is easy. We want the user&amp;#8217;s device name so we can display it in the list of available devices to pair with. So, instead of sending that information in the identity all the time, have some &amp;#8220;discovery mode&amp;#8221; switch which otherwise withholds the device name until a connection to an already-trusted device is established. This leaves the second problem, which quite a bit more tricky. One answer is to have trusted user-selected trusted wifi networks, so KDE Connect doesn&amp;#8217;t broadcast on a random wifi that the user connects to. But what if I connect to, say, my university network where I want to use KDE Connect but I don&amp;#8217;t want to tell everyone that I&amp;#8217;m here? We don&amp;#8217;t have a final answer to this question, but we discussed a few possible solutions. We would like some way of verifying ourselves to the other device which conceals our identity behind some shared secret, so the other device can trust that we are who we say we are, but other devices can&amp;#8217;t fingerprint us. It is a tricky problem but not yet one to solve. Step 1 is to get the new mDNS backend working, step 2 is to add advanced features to it!</summary></entry><entry><title type="html">Welcome to KDE: Nuremberg Megasprint Part 1</title><link href="http://localhost:4000/2019/07/25/welcome_to_kde_nuremberg_megasprint_part_1.html" rel="alternate" type="text/html" title="Welcome to KDE: Nuremberg Megasprint Part 1" /><published>2019-07-25T00:00:00+05:30</published><updated>2019-07-25T00:00:00+05:30</updated><id>http://localhost:4000/2019/07/25/welcome_to_kde_nuremberg_megasprint_part_1</id><content type="html" xml:base="http://localhost:4000/2019/07/25/welcome_to_kde_nuremberg_megasprint_part_1.html">&lt;p&gt;Now that it has been over half a year since I started this blog, it is time to address one of the topics that I promised to address at the beginning: How I got started with KDE. I will do this in the context of the &amp;#8220;Nuremberg Megasprint&amp;#8221; which combined a KDE Connect sprint, a KDE Welcome / Onboarding sprint, and a KWin sprint.&lt;/p&gt;
&lt;p&gt;At the Onboarding sprint, we were talking mostly about ways to make it easier for developers new to KDE to work on our software. Currently the path to getting that working is quite convoluted and pretty much requires that a developer read the documentation (which often doesn&amp;#8217;t happen). We agreed that we would like the new developer experience to be easier. I don&amp;#8217;t have a lot to say about that, but keep an eye on the Planet for an idea of what was actually worked on! Instead, since I am a relatively new KDE contributor, I will tell the story of how I got started.&lt;/p&gt;
&lt;p&gt;I started using Plasma as a desktop environment around 2012, shortly after Ubuntu switched from Gnome 2, which I liked, to Unity, which I disliked. I tried playing with Mate and Cinnamon for Ubuntu, but I didn&amp;#8217;t find either one was what I wanted. I had heard that KDE existed, but I didn&amp;#8217;t know anything about it, so I gave it a try as well.&lt;/p&gt;
&lt;p&gt;At the time, my main computer was an HP TM2-2000-series laptop, with a quite respectable 4GB RAM, some decent dual-core, first-generation Intel i5, and a little AMD GPU (which I could never get to work under Linux). But most importantly, it had a touchscreen with a capacitive digitizer for fingers, some styluses, or carrots (which usually work better than the special styluses) and a built-in Wacom digitizer for taking notes in class using the special pen.&lt;/p&gt;
&lt;figure data-shortcode=&quot;caption&quot; id=&quot;attachment_36&quot; aria-describedby=&quot;caption-attachment-36&quot; style=&quot;width: 450px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img data-attachment-id=&quot;36&quot; data-permalink=&quot;https://simonredman.wordpress.com/2019/07/25/welcome-to-kde-nuremberg-megaspring-part-1/hp-tm2-walmart/&quot; data-orig-file=&quot;https://simonredman.files.wordpress.com/2019/07/hp-tm2-walmart.jpeg&quot; data-orig-size=&quot;450,450&quot; data-comments-opened=&quot;0&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;HP-TM2-Walmart&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://simonredman.files.wordpress.com/2019/07/hp-tm2-walmart.jpeg?w=300&quot; data-large-file=&quot;https://simonredman.files.wordpress.com/2019/07/hp-tm2-walmart.jpeg?w=450&quot; class=&quot;alignnone size-full wp-image-36&quot; src=&quot;https://simonredman.files.wordpress.com/2019/07/hp-tm2-walmart.jpeg?w=700&quot; alt=&quot;HP-TM2-Walmart&quot; srcset=&quot;https://simonredman.files.wordpress.com/2019/07/hp-tm2-walmart.jpeg 450w, https://simonredman.files.wordpress.com/2019/07/hp-tm2-walmart.jpeg?w=150 150w, https://simonredman.files.wordpress.com/2019/07/hp-tm2-walmart.jpeg?w=300 300w&quot; sizes=&quot;(max-width: 450px) 100vw, 450px&quot;   /&gt;&lt;figcaption id=&quot;caption-attachment-36&quot; class=&quot;wp-caption-text&quot;&gt;An HP TM-2 Laptop, Almost in Tablet Mode&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Plasma was nice to use on the touchscreen but most importantly, it had a built-in hotkey to disable the capacitive digitizer so I could write notes using the Wacom pen without my palm constantly messing everything up. It may sound silly, but that is literally the reason I started using KDE software!&lt;/p&gt;
&lt;p&gt;Kubuntu came packaged with KDE Connect, which I was very excited by. Could I write SMS from the desktop without touching my phone and without installing questionable software? At the time, no. This was practically the first release of KDE Connect. It still had cool features, so I still loved it, but replying to SMS didn&amp;#8217;t come until later.&lt;/p&gt;
&lt;p&gt;Fast-forward the clock a couple of years. KDE Connect has had reply-to SMS features for awhile, but something was wrong. If you wrote a &amp;#8220;long&amp;#8221; SMS, KDE Connect would appear to accept it but then silently the message would never be sent. How curious! Since the only thing you could do was reply, it was hard to reproduce what was happening. I also noticed that KDE Connect had some work-in-progress, unreleased Telepathy plugin.&lt;/p&gt;
&lt;p&gt;I started trying to set up Telepathy so that I would be able to send messages as well as just reply to them. I was able to get the plugin set up, which had (and still has, unfortunately) the very basic feature that you could enter a phone number and see messages sent and received in that &amp;#8220;chat&amp;#8221;, with no history or contacts-matching. Once I had the ability to send messages from KDE Connect, I noticed that any message I sent which was longer than 1 SMS (~140 bytes) would go missing.&lt;/p&gt;
&lt;p&gt;At this point, the only software I had built was the Telepathy plugin (none of the core parts of KDE Connect). Luckily, the Android app is not difficult to build and debug. I followed the message I was trying to send through the app into an Android system call which was clearly for sending a single SMS (and apparently fails silently if the message is too long). I tweaked that part of the code to use the Android way of sending a multi-part SMS, posted the patch (to the mailing list, because I didn&amp;#8217;t know Phabricator was the way to go since I hadn&amp;#8217;t read the contributor documentation) and I have been hooked ever since.&lt;/p&gt;
&lt;p&gt;Building the desktop app was more of a problem and is a better story to tell in the context of onboarding. I couldn&amp;#8217;t figure out what cmake flags I needed. I am using Fedora, so I downloaded the source RPM to see if that would help me. I also couldn&amp;#8217;t figure out how to read that, but I *did* figure out how to re-build the RPM with new sources. So, for about the first 8 months of my time in KDE, my workflow was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a change&lt;/li&gt;
&lt;li&gt;Rebuild the RPM (which took a relatively long time, even on my fairly fast computer)&lt;/li&gt;
&lt;li&gt;Install the new RPM&lt;/li&gt;
&lt;li&gt;Try to figure out why my change wasn&amp;#8217;t working&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Needless to say, this path was very cumbersome. Luckily, about this time, someone updated the KDE Connect wiki with the proper cmake flags to use!&lt;/p&gt;
&lt;p&gt;After a certain amount of effort, I can now run KDE Connect in Eclipse, with the integrated debugger view (Note to readers: I recommend a different IDE for KDE/Qt development. Eclipse requires lots of manual configuration. Try KDevelop!)&lt;/p&gt;
&lt;figure data-shortcode=&quot;caption&quot; id=&quot;attachment_38&quot; aria-describedby=&quot;caption-attachment-38&quot; style=&quot;width: 1730px&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img data-attachment-id=&quot;38&quot; data-permalink=&quot;https://simonredman.wordpress.com/2019/07/25/welcome-to-kde-nuremberg-megaspring-part-1/2019-07-24-kde-connect-eclipse/&quot; data-orig-file=&quot;https://simonredman.files.wordpress.com/2019/07/2019-07-24-kde-connect-eclipse.png&quot; data-orig-size=&quot;1730,1014&quot; data-comments-opened=&quot;0&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;2019-07-24 KDE Connect Eclipse&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://simonredman.files.wordpress.com/2019/07/2019-07-24-kde-connect-eclipse.png?w=300&quot; data-large-file=&quot;https://simonredman.files.wordpress.com/2019/07/2019-07-24-kde-connect-eclipse.png?w=700&quot; class=&quot;alignnone size-full wp-image-38&quot; src=&quot;https://simonredman.files.wordpress.com/2019/07/2019-07-24-kde-connect-eclipse.png?w=700&quot; alt=&quot;2019-07-24 KDE Connect Eclipse&quot; srcset=&quot;https://simonredman.files.wordpress.com/2019/07/2019-07-24-kde-connect-eclipse.png?w=700 700w, https://simonredman.files.wordpress.com/2019/07/2019-07-24-kde-connect-eclipse.png?w=1400 1400w, https://simonredman.files.wordpress.com/2019/07/2019-07-24-kde-connect-eclipse.png?w=150 150w, https://simonredman.files.wordpress.com/2019/07/2019-07-24-kde-connect-eclipse.png?w=300 300w, https://simonredman.files.wordpress.com/2019/07/2019-07-24-kde-connect-eclipse.png?w=768 768w, https://simonredman.files.wordpress.com/2019/07/2019-07-24-kde-connect-eclipse.png?w=1024 1024w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;   /&gt;&lt;figcaption id=&quot;caption-attachment-38&quot; class=&quot;wp-caption-text&quot;&gt;kdeconnectd, in Eclipse, paused in the debugger&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;That&amp;#8217;s all for this post. I think it&amp;#8217;s clear to say that my road to KDE development was far from straightforward. Hopefully we can make that road smoother in the future!&lt;/p&gt;</content><author><name>Simon Redman</name></author><summary type="html">Now that it has been over half a year since I started this blog, it is time to address one of the topics that I promised to address at the beginning: How I got started with KDE. I will do this in the context of the &amp;#8220;Nuremberg Megasprint&amp;#8221; which combined a KDE Connect sprint, a KDE Welcome / Onboarding sprint, and a KWin sprint. At the Onboarding sprint, we were talking mostly about ways to make it easier for developers new to KDE to work on our software. Currently the path to getting that working is quite convoluted and pretty much requires that a developer read the documentation (which often doesn&amp;#8217;t happen). We agreed that we would like the new developer experience to be easier. I don&amp;#8217;t have a lot to say about that, but keep an eye on the Planet for an idea of what was actually worked on! Instead, since I am a relatively new KDE contributor, I will tell the story of how I got started. I started using Plasma as a desktop environment around 2012, shortly after Ubuntu switched from Gnome 2, which I liked, to Unity, which I disliked. I tried playing with Mate and Cinnamon for Ubuntu, but I didn&amp;#8217;t find either one was what I wanted. I had heard that KDE existed, but I didn&amp;#8217;t know anything about it, so I gave it a try as well. At the time, my main computer was an HP TM2-2000-series laptop, with a quite respectable 4GB RAM, some decent dual-core, first-generation Intel i5, and a little AMD GPU (which I could never get to work under Linux). But most importantly, it had a touchscreen with a capacitive digitizer for fingers, some styluses, or carrots (which usually work better than the special styluses) and a built-in Wacom digitizer for taking notes in class using the special pen. An HP TM-2 Laptop, Almost in Tablet Mode Plasma was nice to use on the touchscreen but most importantly, it had a built-in hotkey to disable the capacitive digitizer so I could write notes using the Wacom pen without my palm constantly messing everything up. It may sound silly, but that is literally the reason I started using KDE software! Kubuntu came packaged with KDE Connect, which I was very excited by. Could I write SMS from the desktop without touching my phone and without installing questionable software? At the time, no. This was practically the first release of KDE Connect. It still had cool features, so I still loved it, but replying to SMS didn&amp;#8217;t come until later. Fast-forward the clock a couple of years. KDE Connect has had reply-to SMS features for awhile, but something was wrong. If you wrote a &amp;#8220;long&amp;#8221; SMS, KDE Connect would appear to accept it but then silently the message would never be sent. How curious! Since the only thing you could do was reply, it was hard to reproduce what was happening. I also noticed that KDE Connect had some work-in-progress, unreleased Telepathy plugin. I started trying to set up Telepathy so that I would be able to send messages as well as just reply to them. I was able to get the plugin set up, which had (and still has, unfortunately) the very basic feature that you could enter a phone number and see messages sent and received in that &amp;#8220;chat&amp;#8221;, with no history or contacts-matching. Once I had the ability to send messages from KDE Connect, I noticed that any message I sent which was longer than 1 SMS (~140 bytes) would go missing. At this point, the only software I had built was the Telepathy plugin (none of the core parts of KDE Connect). Luckily, the Android app is not difficult to build and debug. I followed the message I was trying to send through the app into an Android system call which was clearly for sending a single SMS (and apparently fails silently if the message is too long). I tweaked that part of the code to use the Android way of sending a multi-part SMS, posted the patch (to the mailing list, because I didn&amp;#8217;t know Phabricator was the way to go since I hadn&amp;#8217;t read the contributor documentation) and I have been hooked ever since. Building the desktop app was more of a problem and is a better story to tell in the context of onboarding. I couldn&amp;#8217;t figure out what cmake flags I needed. I am using Fedora, so I downloaded the source RPM to see if that would help me. I also couldn&amp;#8217;t figure out how to read that, but I *did* figure out how to re-build the RPM with new sources. So, for about the first 8 months of my time in KDE, my workflow was: Make a change Rebuild the RPM (which took a relatively long time, even on my fairly fast computer) Install the new RPM Try to figure out why my change wasn&amp;#8217;t working Needless to say, this path was very cumbersome. Luckily, about this time, someone updated the KDE Connect wiki with the proper cmake flags to use! After a certain amount of effort, I can now run KDE Connect in Eclipse, with the integrated debugger view (Note to readers: I recommend a different IDE for KDE/Qt development. Eclipse requires lots of manual configuration. Try KDevelop!) kdeconnectd, in Eclipse, paused in the debugger That&amp;#8217;s all for this post. I think it&amp;#8217;s clear to say that my road to KDE development was far from straightforward. Hopefully we can make that road smoother in the future!</summary></entry><entry><title type="html">2019 Plasma and Usability &amp;amp; Productivity sprint</title><link href="http://localhost:4000/2019/07/04/2019_plasma_and_usability_productivity_sprint.html" rel="alternate" type="text/html" title="2019 Plasma and Usability &amp; Productivity sprint" /><published>2019-07-04T00:00:00+05:30</published><updated>2019-07-04T00:00:00+05:30</updated><id>http://localhost:4000/2019/07/04/2019_plasma_and_usability_productivity_sprint</id><content type="html" xml:base="http://localhost:4000/2019/07/04/2019_plasma_and_usability_productivity_sprint.html">&lt;p&gt;From 19.6. to 25.6. I attended this year&amp;#8217;s combined Plasma and Usability &amp;amp; Productivity sprint in the beautiful city of Valencia.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image is-resized&quot;&gt;&lt;img data-attachment-id=&quot;214&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/photo_2019-06-29_14-53-51/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/06/photo_2019-06-29_14-53-51.jpg&quot; data-orig-size=&quot;720,1280&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;photo_2019-06-29_14-53-51&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/06/photo_2019-06-29_14-53-51.jpg?w=169&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/06/photo_2019-06-29_14-53-51.jpg?w=576&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/06/photo_2019-06-29_14-53-51.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-214&quot; width=&quot;355&quot; height=&quot;631&quot; srcset=&quot;https://nicolasfella.files.wordpress.com/2019/06/photo_2019-06-29_14-53-51.jpg?w=355&amp;amp;h=631 355w, https://nicolasfella.files.wordpress.com/2019/06/photo_2019-06-29_14-53-51.jpg?w=710&amp;amp;h=1262 710w, https://nicolasfella.files.wordpress.com/2019/06/photo_2019-06-29_14-53-51.jpg?w=84&amp;amp;h=150 84w, https://nicolasfella.files.wordpress.com/2019/06/photo_2019-06-29_14-53-51.jpg?w=169&amp;amp;h=300 169w&quot; sizes=&quot;(max-width: 355px) 100vw, 355px&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;It was a great opportunity to meet old and new friends, drink beer and sangria on the rooftop and of course do some hacking.&lt;/p&gt;



&lt;p&gt;First we discussed about the future development of Plasma, especially the Wayland experience. I was particularly interested in how we can solve the two missing pieces in KDE Connect on Wayland, Keyboard input and clipboard synchronization.&lt;/p&gt;



&lt;p&gt;We did not only discuss things but got our hands dirty as well tough. I took the opportunity to work on several components, most of which I haven&amp;#8217;t worked on much before:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;I&amp;#8217;ve reworked the &lt;a href=&quot;https://phabricator.kde.org/D22176&quot;&gt;system tray settings&lt;/a&gt; to be more concise and usable. Furthermore I worked on hiding certain system tray elements when they are not in a useful state, making the system tray less cluttered. I also fixed the appearance of the disk quota icon in the system tray settings and the system tray itself when using a dark theme.&lt;/li&gt;&lt;li&gt;After I cleaned the code and polished the export menu I worked on integrating an &lt;a href=&quot;https://phabricator.kde.org/D22074&quot;&gt;image annotator in Spectacle&lt;/a&gt;. Kudos to Damir Porobic for doing the hard part of it by providing &lt;a href=&quot;https://github.com/DamirPorobic/kImageAnnotator&quot;&gt;kImageAnnotator&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;I implemented a more human friendly &lt;a href=&quot;https://phabricator.kde.org/D22006&quot;&gt;sort order description&lt;/a&gt; in Dolphin.&lt;/li&gt;&lt;li&gt;I improved the user experience of Purpose, the framework used for sharing stuff. Cancelling a share &lt;a href=&quot;https://phabricator.kde.org/D21989&quot;&gt;doesn&amp;#8217;t show an error any more&lt;/a&gt;. The share dialogs for KDE Connect and bluetooth got a &lt;a href=&quot;https://phabricator.kde.org/D19646&quot;&gt;huge makeover&lt;/a&gt;. The share menu now shows &lt;a href=&quot;https://phabricator.kde.org/D13150&quot;&gt;ellipsis where semantically appropriate&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Next to polishing the menus I implemented &lt;a href=&quot;https://phabricator.kde.org/D21468&quot;&gt;sharing via Purpose&lt;/a&gt; in Gwenview.&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;The sprint was generously hosted by &lt;a href=&quot;https://slimbook.es/en&quot;&gt;Slimbook&lt;/a&gt;. Thank you very much for that! &lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img data-attachment-id=&quot;215&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/sprint/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/07/sprint.jpg&quot; data-orig-size=&quot;6000,4000&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;sprint&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/07/sprint.jpg?w=300&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/07/sprint.jpg?w=1024&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/07/sprint.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-215&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;Sprints like this are only possible due to the donations KDE e.V. is getting. Please consider &lt;a href=&quot;https://kde.org/community/donations/&quot;&gt;donating&lt;/a&gt; if you want us to be able to further improve our software.&lt;/p&gt;</content><author><name>Nicolas Fella</name></author><summary type="html">From 19.6. to 25.6. I attended this year&amp;#8217;s combined Plasma and Usability &amp;amp; Productivity sprint in the beautiful city of Valencia.</summary></entry><entry><title type="html">KDE Connect and Android</title><link href="http://localhost:4000/2019/04/01/kde_connect_and_android.html" rel="alternate" type="text/html" title="KDE Connect and Android" /><published>2019-04-01T00:00:00+05:30</published><updated>2019-04-01T00:00:00+05:30</updated><id>http://localhost:4000/2019/04/01/kde_connect_and_android</id><content type="html" xml:base="http://localhost:4000/2019/04/01/kde_connect_and_android.html">&lt;p&gt;As most of you know KDE Connect has recently been removed from Google Play due to a policy violation with regard to our SMS and telephony features. While the public outcry helped to get it back in with all features remaining this is just yet another example of how new Android policies make it harder for us to maintain the level of quality and features you expect from KDE Connect. Android Oreo forced us to drop support for older Android versions and imposed restrictions on background services which force us to have an annoying persistent notification. It is to be expected that Google will further restrict background services which will impose more problems for us. With each new Android versions new restrictions and problems arise which we have to work around, if possible. For example, the upcoming Android Q imposes restrictions on accessing the phone&amp;#8217;s clipboard. It is unclear whether the clipboard sync in it&amp;#8217;s current form is feasible on Android Q. Those are just examples of the problems with the direction Android is moving towards.&lt;/p&gt;



&lt;p&gt;With Plasma Mobile KDE has been working on an alternative mobile platform for a while now. We now consider Plasma Mobile stable and suitable for everyone to use. Therefore we decided to stop developing KDE Connect for Android and focus on the Plasma Mobile experience. We have removed the app from Google Play and F-Droid as well as removed the public repositories. We are also in contact with Google about removing the active installations from devices.&lt;/p&gt;



&lt;p&gt;We hope that this steps contributes to a better mobile experience in the long term beginning today, April 1st 2019.&lt;/p&gt;</content><author><name>Nicolas Fella</name></author><summary type="html">As most of you know KDE Connect has recently been removed from Google Play due to a policy violation with regard to our SMS and telephony features. While the public outcry helped to get it back in with all features remaining this is just yet another example of how new Android policies make it harder for us to maintain the level of quality and features you expect from KDE Connect. Android Oreo forced us to drop support for older Android versions and imposed restrictions on background services which force us to have an annoying persistent notification. It is to be expected that Google will further restrict background services which will impose more problems for us. With each new Android versions new restrictions and problems arise which we have to work around, if possible. For example, the upcoming Android Q imposes restrictions on accessing the phone&amp;#8217;s clipboard. It is unclear whether the clipboard sync in it&amp;#8217;s current form is feasible on Android Q. Those are just examples of the problems with the direction Android is moving towards.</summary></entry><entry><title type="html">Sorry Google Play, but you suck!</title><link href="http://localhost:4000/2019/03/19/sorry_google_play_but_you_suck.html" rel="alternate" type="text/html" title="Sorry Google Play, but you suck!" /><published>2019-03-19T00:00:00+05:30</published><updated>2019-03-19T00:00:00+05:30</updated><id>http://localhost:4000/2019/03/19/sorry_google_play_but_you_suck</id><content type="html" xml:base="http://localhost:4000/2019/03/19/sorry_google_play_but_you_suck.html">&lt;p&gt;This morning I woke up to the news, that instead of getting a new version of KDE Connect app, it had been removed from the Play store!  The following is a tweet from the lead KDE Connect developer.&lt;/p&gt;



&lt;figure class=&quot;wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter&quot;&gt;&lt;div class=&quot;wp-block-embed__wrapper&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;KDE Connect has been removed from &lt;a href=&quot;https://twitter.com/GooglePlay?ref_src=twsrc%5Etfw&quot;&gt;@GooglePlay&lt;/a&gt; for violating their new policy on apps that access SMS [1]. The policy has an explicit exception for companion apps (like KDE Connect), but it was removed anyway and *there&amp;#39;s no way to talk to Google*. 1/N&lt;br&gt;&lt;br&gt;[1] &lt;a href=&quot;https://t.co/WDXEqTUhHl&quot;&gt;https://t.co/WDXEqTUhHl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Albert Vaca Cintora (@albertvaka) &lt;a href=&quot;https://twitter.com/albertvaka/status/1107924633750253568?ref_src=twsrc%5Etfw&quot;&gt;March 19, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;/figure&gt;



&lt;p&gt;Unfortunately, this means that the SMS functionally has had to be stripped out, all because Google Play don&amp;#8217;t understand that this is core functionality for many users (me included).  Their decision to suddenly revoke the exception is, in my opinion, very unfair and not very &amp;#8220;open&amp;#8221; of them.  At least tell us why KDE Connect suddenly violates their policy.&lt;/p&gt;</content><author><name>Clivejo</name></author><summary type="html">This morning I woke up to the news, that instead of getting a new version of KDE Connect app, it had been removed from the Play store! The following is a tweet from the lead KDE Connect developer.</summary></entry><entry><title type="html">Creating a Plasma Mobile App 1 – Basic Controls</title><link href="http://localhost:4000/2019/02/28/creating_a_plasma_mobile_app_1_basic_controls.html" rel="alternate" type="text/html" title="Creating a Plasma Mobile App 1 – Basic Controls" /><published>2019-02-28T00:00:00+05:30</published><updated>2019-02-28T00:00:00+05:30</updated><id>http://localhost:4000/2019/02/28/creating_a_plasma_mobile_app_1_basic_controls</id><content type="html" xml:base="http://localhost:4000/2019/02/28/creating_a_plasma_mobile_app_1_basic_controls.html">&lt;p&gt;My last post shows how to create a stub Python/Kirigami app that doesn&amp;#8217;t do anything. Time to change that! In this post we&amp;#8217;re filling the screen with some controls.&lt;/p&gt;



&lt;h2&gt;Kirigami Pages&lt;/h2&gt;



&lt;p&gt;Kirigami apps are typically organized in Pages. Those are the different &amp;#8216;Screens&amp;#8217; of an app. If you come from the Android world you can think of them as the view part of activities. In our case we want to have an initial page that offers to enter a stop or a destination and opens a new page that shows a list of possible routes. Clicking on one of the list items opens a new page with a detailed view about the connections.&lt;/p&gt;



&lt;p&gt;Pages are organized in a pagestack where pages can be pushed and popped.  On a phone only the topmost page is shown, whereas on a larger screen (desktop or tablet) multiple pages can be shown next to each other.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img data-attachment-id=&quot;173&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/image-3/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-3.png&quot; data-orig-size=&quot;540,810&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image-3&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-3.png?w=200&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-3.png?w=540&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-3.png&quot; alt=&quot;&quot; class=&quot;wp-image-173&quot; /&gt;&lt;figcaption&gt;A single page on the phone&lt;/figcaption&gt;&lt;/figure&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img data-attachment-id=&quot;174&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/image-4/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-4.png&quot; data-orig-size=&quot;1214,919&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image-4&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-4.png?w=300&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-4.png?w=1024&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-4.png&quot; alt=&quot;&quot; class=&quot;wp-image-174&quot; /&gt;&lt;figcaption&gt;Two pages next to each other on the desktop&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;So let&amp;#8217;s create some pages! I&amp;#8217;m going put each page in its own .qml file and let the name end with Page. Our first version of StartPage.qml looks like this:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import QtQuick 2.2
import QtQuick.Layouts 1.1
import QtQuick.Controls 2.4
import org.kde.kirigami 2.0 as Kirigami

Kirigami.Page
{
    title: &quot;Start journey&quot;
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;It produces an empty page with a title. Before we can actually see it we need to add it to the pageStack. Replace the Label {} declaration in main.qml with&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;pageStack.initialPage: Qt.resolvedUrl(&quot;StartPage.qml&quot;)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;pageStack.initialPage is, well, setting the initial Page of the Page stack.  Qt.resolveUrl is converting the relative URL of the QML file into an absolute one. Starting the app gives us an empty page&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img data-attachment-id=&quot;177&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/image-5/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-5.png&quot; data-orig-size=&quot;480,720&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image-5&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-5.png?w=200&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-5.png?w=480&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-5.png&quot; alt=&quot;&quot; class=&quot;wp-image-177&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;Time to fill it with some content.&lt;/p&gt;



&lt;h2&gt;Basic controls&lt;/h2&gt;



&lt;p&gt;On the start page we need need a way to enter start and destination of our journey as well as the date and time of our travel. For start and destination we are using simple TextFields from QtQuick Controls 2. Note that the older version 1 of QtQuick Controls is still around for the foreseable future, but we want to avoid using that. We&amp;#8217;re extending StartPage.qml with our controls&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;ColumnLayout {
    width: parent.width

    Label {
        text: &quot;From:&quot;
    }
    TextField {
        Layout.fillWidth: true
        placeholderText: &quot;Würzburg...&quot;
    }
    Label {
        text: &quot;To:&quot;
    }
    TextField {
        Layout.fillWidth: true
        placeholderText: &quot;Berlin...&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;A ColumnLayout is a component that positions its children vertically. We set it to be as wide as its parent, the page. The TextFields shall span the whole width as well. Instead of using the same &amp;#8216;width: parent.width&amp;#8217; we are using &amp;#8216;Layout.fillWidth: true&amp;#8217;. This property is only available to children of a Layout. The difference to the first way is that all the width that is not already occupied by other elements in the layout is filled.&lt;/p&gt;



&lt;p&gt;Next we need some way to enter a departure date and time. Unfortunately I&amp;#8217;m not aware of any ready-to-use date and time pickers in QtQuick and Kirigami, so I&amp;#8217;ll leave this open for a future post. For the time being two simple placeholder buttons shall be enough. Let&amp;#8217;s add them to our ColumnLayout&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;RowLayout {
    width: parent.width
    Button {
        text: &quot;Pick date&quot;
        Layout.fillWidth: true
    }
    Button {
        text: &quot;Pick time&quot;
        Layout.fillWidth: true
    }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Now our app looks like this. Both buttons have the &amp;#8220;Layout.fillWidth&amp;#8221; property set to true, resulting in each one getting 50% of the space.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img data-attachment-id=&quot;180&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/image-6/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-6.png&quot; data-orig-size=&quot;480,720&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image-6&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-6.png?w=200&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-6.png?w=480&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-6.png&quot; alt=&quot;&quot; class=&quot;wp-image-180&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;The buttons look a bit weird, don&amp;#8217;t they? That&amp;#8217;s because they are using the built-in QtQuick Controls style. If you are using Plasma you are probably used to the org.kde.desktop style which emulates the active Qt Widgets style. We can force our app to use the org.kde.desktop style by running &amp;#8216;QT_QUICK_CONTROLS_STYLE=&amp;#8221;org.kde.desktop&amp;#8221; ./main.py&amp;#8217;&lt;/p&gt;



&lt;p&gt;&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img data-attachment-id=&quot;181&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/image-7/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-7.png&quot; data-orig-size=&quot;480,720&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image-7&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-7.png?w=200&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-7.png?w=480&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-7.png&quot; alt=&quot;&quot; class=&quot;wp-image-181&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;Looks closer to what we have on the desktop, doesn&amp;#8217;t it? Qt also offers a &amp;#8216;material&amp;#8217; style that follows Android&amp;#8217;s material guidelines&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img data-attachment-id=&quot;182&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/image-8/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-8.png&quot; data-orig-size=&quot;480,720&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image-8&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-8.png?w=200&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-8.png?w=480&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-8.png&quot; alt=&quot;&quot; class=&quot;wp-image-182&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;Next we need a way to press &amp;#8220;Search&amp;#8221;. We could solve that with yet another button, but Kirigami offers another way. Pages in Kirigami can have Actions associated with them. The presentation differes from the phone to the desktop. On the phone actions are displayed on the bottom where they are easily reachable while on the desktop they are displayed in form of a toolbar at the top of the page. Let&amp;#8217;s add an action to our page&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;Kirigami.Page
{
    id: root

    title: &quot;Start journey&quot;

    actions.main: Kirigami.Action {
        icon.name: &quot;search&quot;
        text: &quot;Search&quot;
        onTriggered: pageStack.push(Qt.resolvedUrl(&quot;ConnectionsPage.qml&quot;))
    }

    ColumnLayout {
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;On the phone we get this&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img data-attachment-id=&quot;184&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/image-9/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-9.png&quot; data-orig-size=&quot;480,720&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image-9&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-9.png?w=200&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-9.png?w=480&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-9.png&quot; alt=&quot;&quot; class=&quot;wp-image-184&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;while on the desktop we get that&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img data-attachment-id=&quot;185&quot; data-permalink=&quot;https://nicolasfella.wordpress.com/image-10/&quot; data-orig-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-10.png&quot; data-orig-size=&quot;480,720&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image-10&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-10.png?w=200&quot; data-large-file=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-10.png?w=480&quot; src=&quot;https://nicolasfella.files.wordpress.com/2019/02/image-10.png&quot; alt=&quot;&quot; class=&quot;wp-image-185&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;You can force the mobile view on the desktop by setting the QT_QUICK_CONTROLS_MOBILE variable to 1.&lt;/p&gt;



&lt;p&gt;Triggering the action pushes ConnectionsPage.qml on the pageStack. Of cource we need to create that one now:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import QtQuick 2.2
import QtQuick.Layouts 1.1
import QtQuick.Controls 2.4
import org.kde.kirigami 2.4 as Kirigami

Kirigami.Page
{
    title: &quot;Connections&quot;
}
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Right now it&amp;#8217;s just an empty page, we&amp;#8217;re going to fill it with life in the next post.&lt;/p&gt;



&lt;p&gt;You can find the full source code for all posts on &lt;a href=&quot;https://invent.kde.org/nicolasfella/kstraba&quot;&gt;Git&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;Happy hacking!&lt;/p&gt;</content><author><name>Nicolas Fella</name></author><summary type="html">My last post shows how to create a stub Python/Kirigami app that doesn&amp;#8217;t do anything. Time to change that! In this post we&amp;#8217;re filling the screen with some controls.</summary></entry></feed>